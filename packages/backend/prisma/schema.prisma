// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  email         String    @unique
  googleId      String    @unique @map("google_id")
  name          String
  avatarUrl     String?   @map("avatar_url")
  googleTokens  Json      @map("google_tokens")
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")

  // Relations
  documents      Document[]
  pdfTemplates   PdfTemplate[]
  searchQueries  SearchQuery[]
  pdfGenerations PdfGeneration[]
  syncJobs       SyncJob[]

  @@map("users")
}

model Document {
  id                  String            @id @default(uuid()) @db.Uuid
  userId              String            @map("user_id") @db.Uuid
  googleFileId        String            @unique @map("google_file_id")
  name                String
  mimeType            String            @map("mime_type")
  filePath            String?           @map("file_path")
  fileSize            BigInt            @map("file_size")
  googleModifiedTime  DateTime          @map("google_modified_time")
  processedAt         DateTime?         @map("processed_at")
  status              DocumentStatus    @default(PENDING)
  metadata            Json?
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  chunks        DocumentChunk[]

  @@map("documents")
}

model DocumentChunk {
  id          String   @id @default(uuid()) @db.Uuid
  documentId  String   @map("document_id") @db.Uuid
  pineconeId  String   @unique @map("pinecone_id")
  content     String
  metadata    Json?
  chunkIndex  Int      @map("chunk_index")
  tokenCount  Int      @map("token_count")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_chunks")
}

model PdfTemplate {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  name           String
  description    String?
  filePath       String    @map("file_path")
  fieldMappings  Json      @map("field_mappings")
  llmPrompts     Json      @map("llm_prompts")
  isPublic       Boolean   @default(false) @map("is_public")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfGenerations PdfGeneration[]

  @@map("pdf_templates")
}

model SearchQuery {
  id                   String   @id @default(uuid()) @db.Uuid
  userId               String   @map("user_id") @db.Uuid
  query                String
  resultsMetadata      Json?    @map("results_metadata")
  resultCount          Int      @map("result_count")
  maxSimilarityScore   Float?   @map("max_similarity_score")
  createdAt            DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_queries")
}

model PdfGeneration {
  id             String              @id @default(uuid()) @db.Uuid
  userId         String              @map("user_id") @db.Uuid
  templateId     String              @map("template_id") @db.Uuid
  filePath       String?             @map("file_path")
  formData       Json                @map("form_data")
  llmCompletions Json?               @map("llm_completions")
  status         PdfGenerationStatus @default(PENDING)
  createdAt      DateTime            @default(now()) @map("created_at")
  completedAt    DateTime?           @map("completed_at")

  // Relations
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  template PdfTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("pdf_generations")
}

model SyncJob {
  id           String        @id @default(uuid()) @db.Uuid
  userId       String        @map("user_id") @db.Uuid
  jobType      SyncJobType   @map("job_type")
  status       SyncJobStatus @default(PENDING)
  metadata     Json?
  startedAt    DateTime?     @map("started_at")
  completedAt  DateTime?     @map("completed_at")
  errorMessage String?       @map("error_message")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sync_jobs")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum DocumentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PdfGenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SyncJobType {
  DRIVE_SYNC
  EMBEDDING_SYNC
  FULL_SYNC
}

enum SyncJobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
} 